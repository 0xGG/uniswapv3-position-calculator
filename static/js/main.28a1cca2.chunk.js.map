{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","tokenAName","setTokenAName","tokenBName","setTokenBName","tokenAAmount","setTokenAAmount","tokenBAmount","setTokenBAmount","reservedTokenAAmount","setReservedTokenAAmount","reservedTokenBAmount","setReservedTokenBAmount","priceTokenAPerTokenB","setPriceTokenAPerTokenB","requiredLPTokenAPerTokenB","setRequiredTokenAPerTokenB","message","setMessage","useEffect","tokenAAmount_","parseFloat","tokenBAmount_","reservedTokenAAmount_","reservedTokenBAmount_","priceTokenAPerTokenB_","requiredLPTokenAPerTokenB_","isNaN","tokenBToPool","calculatePosition","tokenAToPool","putPoolMsg","className","value","onChange","event","target","style","marginTop","marginBottom","dangerouslySetInnerHTML","__html","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28a1cca2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction calculatePosition(\n  tokenAAmount: number,\n  tokenBAmount: number,\n  reservedTokenAAmount: number,\n  reservedTokenBAmount: number,\n  priceTokenAPerTokenB: number,\n  requiredLPTokenAPerTokenB: number\n): number[] {\n  const totalAmount = tokenAAmount + priceTokenAPerTokenB * tokenBAmount;\n  /**\n   *\n   * tokenAToPool / tokenBToPool = requiredLPTokenAPerTokenB\n   * => tokenAToPool = requiredLPTokenAPerTokenB * tokenBToPool\n   *\n   * (reservedTokenAAmount + tokenAToPool) + (reservedTokenBAmount + tokenBToPool) * priceTokenAPerTokenB = totalAmount\n   * => (reservedTokenAAmount + requiredLPTokenAPerTokenB * tokenBToPool) + (reservedTokenBAmount + tokenBToPool) * priceTokenAPerTokenB = totalAmount\n   * => reservedTokenAAmount + requiredLPTokenAPerTokenB * tokenBToPool + reservedTokenBAmount * priceTokenAPerTokenB + tokenBToPool * priceTokenAPerTokenB = totalAmount\n   * => tokenBToPool * (requiredLPTokenAPerTokenB + priceTokenAPerTokenB) = totalAmount - reservedTokenAAmount - reservedTokenBAmount * priceTokenAPerTokenB\n   * => tokenBToPool = (totalAmount - reservedTokenAAmount - reservedTokenBAmount * priceTokenAPerTokenB) / (requiredLPTokenAPerTokenB + priceTokenAPerTokenB)\n   */\n  const tokenBToPool =\n    (totalAmount -\n      reservedTokenAAmount -\n      reservedTokenBAmount * priceTokenAPerTokenB) /\n    (requiredLPTokenAPerTokenB + priceTokenAPerTokenB);\n  const tokenAToPool = requiredLPTokenAPerTokenB * tokenBToPool;\n  return [tokenAToPool, tokenBToPool];\n}\n\nfunction App() {\n  const [tokenAName, setTokenAName] = useState<string>(\"USDC\");\n  const [tokenBName, setTokenBName] = useState<string>(\"ETH\");\n  const [tokenAAmount, setTokenAAmount] = useState<string>(\"0\");\n  const [tokenBAmount, setTokenBAmount] = useState<string>(\"1\");\n  const [reservedTokenAAmount, setReservedTokenAAmount] = useState<string>(\"0\");\n  const [reservedTokenBAmount, setReservedTokenBAmount] =\n    useState<string>(\"0.1\");\n  const [priceTokenAPerTokenB, setPriceTokenAPerTokenB] =\n    useState<string>(\"2000\");\n  const [requiredLPTokenAPerTokenB, setRequiredTokenAPerTokenB] =\n    useState<string>(\"400\");\n  const [message, setMessage] = useState<string>(\"\");\n\n  useEffect(() => {\n    const tokenAAmount_ = parseFloat(tokenAAmount);\n    const tokenBAmount_ = parseFloat(tokenBAmount);\n    const reservedTokenAAmount_ = parseFloat(reservedTokenAAmount);\n    const reservedTokenBAmount_ = parseFloat(reservedTokenBAmount);\n    const priceTokenAPerTokenB_ = parseFloat(priceTokenAPerTokenB);\n    const requiredLPTokenAPerTokenB_ = parseFloat(requiredLPTokenAPerTokenB);\n    if (\n      isNaN(tokenAAmount_) ||\n      isNaN(tokenBAmount_) ||\n      isNaN(reservedTokenAAmount_) ||\n      isNaN(reservedTokenBAmount_) ||\n      isNaN(priceTokenAPerTokenB_) ||\n      isNaN(requiredLPTokenAPerTokenB_)\n    ) {\n      setMessage(\"\");\n    } else {\n      const [tokenAToPool, tokenBToPool] = calculatePosition(\n        tokenAAmount_,\n        tokenBAmount_,\n        reservedTokenAAmount_,\n        reservedTokenBAmount_,\n        priceTokenAPerTokenB_,\n        requiredLPTokenAPerTokenB_\n      );\n      const putPoolMsg = `Put <span class=\"token-a\">${tokenAToPool} <b>${tokenAName}</b></span> and <span class=\"token-b\">${tokenBToPool} <b>${tokenBName}</b></span> to the pool.`;\n      if (tokenAToPool > tokenAAmount_ - reservedTokenAAmount_) {\n        setMessage(\n          `Swap <span class=\"token-b\">${\n            tokenBAmount_ - reservedTokenBAmount_ - tokenBToPool\n          } <b>${tokenBName}</b></span> for <span class=\"token-a\">${\n            tokenAToPool - (tokenAAmount_ - reservedTokenAAmount_)\n          } <b>${tokenAName}</b></span>.<br><br>` + putPoolMsg\n        );\n      } else {\n        setMessage(\n          `Swap <span class=\"token-a\">${\n            tokenAAmount_ - reservedTokenAAmount_ - tokenAToPool\n          } <b>${tokenAName}</b></span> for <span class=\"token-b\">${\n            tokenBToPool - (tokenBAmount_ - reservedTokenBAmount_)\n          } <b>${tokenBName}</b></span>.<br><br>` + putPoolMsg\n        );\n      }\n    }\n  }, [\n    tokenAName,\n    tokenBName,\n    tokenAAmount,\n    tokenBAmount,\n    reservedTokenAAmount,\n    reservedTokenBAmount,\n    priceTokenAPerTokenB,\n    requiredLPTokenAPerTokenB,\n  ]);\n\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Uniswap V3 Position Calculator</h1>\n        <div className={\"row\"}>\n          <input\n            value={tokenAName}\n            onChange={(event) => setTokenAName(event.target.value)}\n          ></input>{\" \"}\n          in wallet:{\" \"}\n          <input\n            value={tokenAAmount}\n            onChange={(event) => setTokenAAmount(event.target.value)}\n          ></input>\n        </div>\n        <div className={\"row\"}>\n          <input\n            value={tokenBName}\n            onChange={(event) => setTokenBName(event.target.value)}\n          ></input>{\" \"}\n          in wallet:{\" \"}\n          <input\n            value={tokenBAmount}\n            onChange={(event) => setTokenBAmount(event.target.value)}\n          ></input>\n        </div>\n        <div className={\"row\"}>\n          Reserved <span className={\"token-a\"}>{tokenAName}</span>:{\" \"}\n          <input\n            value={reservedTokenAAmount}\n            onChange={(event) => setReservedTokenAAmount(reservedTokenAAmount)}\n          ></input>\n        </div>\n        <div className={\"row\"}>\n          Reserved <span className={\"token-b\"}>{tokenBName}</span>:{\" \"}\n          <input\n            value={reservedTokenBAmount}\n            onChange={(event) => setReservedTokenBAmount(reservedTokenBAmount)}\n          ></input>\n        </div>\n        <div className={\"row\"}>\n          Price of <span className={\"token-a\"}>{tokenAName}</span> per{\" \"}\n          <span className={\"token-b\"}>{tokenBName}</span>:{\" \"}\n          <input\n            value={priceTokenAPerTokenB}\n            onChange={(event) => setPriceTokenAPerTokenB(event.target.value)}\n          ></input>\n        </div>\n        <div className={\"row\"}>\n          Required LP of <span className={\"token-a\"}>{tokenAName}</span> per{\" \"}\n          <span className={\"token-b\"}>{tokenBName}</span>:\n          <input\n            value={requiredLPTokenAPerTokenB}\n            onChange={(event) => setRequiredTokenAPerTokenB(event.target.value)}\n          ></input>\n        </div>\n        <hr style={{ marginTop: \"16px\", marginBottom: \"32px\" }}></hr>\n        <div dangerouslySetInnerHTML={{ __html: message }}></div>\n        <hr style={{ marginTop: \"16px\", marginBottom: \"32px\" }}></hr>\n        <div>\n          <h2>Useful links</h2>\n          <p>\n            <a\n              href=\"https://uniswapv3.flipsidecrypto.com/\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n            >\n              https://uniswapv3.flipsidecrypto.com/\n            </a>\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}